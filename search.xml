<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[计算机系统学习资料汇总]]></title>
      <url>%2F2017%2F04%2F27%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[操作系统与组成原理。 计算机系统导论先上一门导论课，把软件硬件串起来，为后面深入学习构建一个Big Picture。可选择的有： 《深入理解计算机系统》 大名鼎鼎的CSAPP，千万不要被中文译名骗了，并不深入。CMU的计算机导论课教材，出自CS系主任之手。 可选择的辅助教程(以下课程全部都是围绕CSAPP来讲的)： CMU的 Introduction to Computer Systems，包含了讲义，视频，Project和各种资料。 英语好的同学可以跟着来。毕竟正版，质量应该最好。 华盛顿大学的The Hardware/Software Interface，使用CSAPP做教材，把经典的几个Project都引入了。 这门课在Coursea上开过，可以在课程图谱找到当时的视频和字幕(英文)。所以比较适合英语一般的同学。 计算机系统基础(一)：程序的表示、转换与链接 和 计算机系统基础（二）：程序的执行和存储访问 南大袁春风老师的课，内容和CSAPP一致。 学堂在线上的汇编语言程序设计 汇编语言是学习计算机系统的基础，这门课比较好的一点是既与上层C语言结合讲又与下层体系结构结合讲，起到了软硬件接口的效果，推荐。 汇编语言 上面提到过的学堂在线上的汇编语言程序设计 汇编语言(第3版) 王爽的汇编教材，据称是国人写的最好的计算机教材。 x86汇编语言 : 从实模式到保护模式 也是一本很好的汇编教材。 操作系统 Operating Systems: Three Easy Pieces 可能是最好的操作系统教材，据说简单易读，文笔很好。 哈工大操作系统MOOC加实验 Orange’S:一个操作系统的实现 如果你想动手写一个，推荐这本。 计算机组成原理 计算机组成与设计 软件/硬件接口 美国经典教材，对应国内的计算机组成原理，也就是硬件部分 Nand2Tetris 这是一本课本，中译名计算机系统要素 : 从零开始构建现代计算机。这还是一个Coursea课程，分为两个Part，第一个部分讲的是从逻辑门开始搭建出一台计算机，第二部分讲的是从这台计算机上写出俄罗斯方块游戏。如果跟下来会计算机系统有非常直观的理解。 科普性质的书如果是想系统学习，直接去啃上面的大鱼大肉；如果是业余选手，想要简单了解一下神秘的计算机，推荐下面两本科普书，一英一中，范围内容差不多。 编码的奥秘 穿越计算机的迷雾]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C++学习笔记]]></title>
      <url>%2F2017%2F04%2F26%2Fcpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[学习C++时所作的笔记。 参考资料： C++程序设计（原书第3版） C++ Primer 中文版（第 5 版） 慕课网 基本： 震惊！cout居然是console output的简写。endl是end line的简写。 命名空间： 定义命名空间 1234567namespace A&#123; int a = 1; void fun()&#123; //todo &#125;&#125; 数据类型： long long与long的区别： (等看过C++Primer后整理) #include &lt;limits&gt; 中定义了一些非常有用的常量： INT_MIN、INT_MAX、LONG_MIN、LONG_MAX、FLT_MIN、FLT_MAX、DBL_MIN、DBL_MAX sizeof()可用于类型名也可以用于变量 前缀0表示八进制整数，前缀0x表示十六进制整数 浮点数的名字由来：带小数点的数值，用科学计数法表示时，小数点的位置浮动了。 类型转换： 显式转换(Explicit Conversion) 转换运算符： static_cast&lt;type&gt;(value),其中value是一个变量/字面常量/表达式 C-style cast：(int)value 强制转换(Cast)：显式转换的另一种说法(大坑 隐式转换(Implicit Conversion) 溢出： overflow：数据超过类型最大值或低于最小值。 underflow：浮点数太小(太接近于0)被近似为0 浮点数有精度，涉及浮点数的计算会导致四舍五入误差，因此，浮点数之间判断相等是不可靠的。 解决方案： 123const double EPSILON = 1E-14; //const float EPSILON = 1E-7;if( abs(a-b) &lt; EPSILON ) //使用abs()需要#include &lt;cmath&gt; cout&lt;&lt;"a = b"; 简化bool变量赋值： 1234if ( number%2 == 0) even = true;else even = false; 写成下面这样会好一点： bool even = number%2 == 0; 直接输出： cout &lt;&lt; (num % 2 == 0 ? &quot;num is even&quot; : &quot;num is odd&quot;); 变量 C++支持形如int a(1);的语法来声明并初始化变量，等价于int a = 1; 库函数 生成随机整数： 1234567#include &lt;cstdlib&gt;#include &lt;ctime&gt;using namespace std;int main()&#123;srand(time(0)); //以time(0)为种子cout &lt;&lt; rand()%10; //生成1~9的随机整数&#125; 数学函数： ceil(x) x被向上取整 ， floor(x) x被向下取整 ， 返回的整数是double类型 字符函数： 需要#include &lt;cctype&gt; isdigit(ch) 数字，返回true isalpha(ch) 字母，返回true isalnum(ch) 字母或数字，返回true islower(ch) issupper(ch) 判断大小写 isspace(ch) 判断空格 tolower(ch) tosupper(ch) 转换大小写 字符串： 连接： string s3 = s1 + s2; 可以 string s += &quot;blabla&quot;; 可以 string s = &quot;abc&quot; + &quot;def&quot;; 是非法的 比较： ==、!=、&lt;=、&gt;、=、&lt;、&gt; 读： cin &gt;&gt; s;` 以空白字符结束，如果字符串中有空格则无法正确输入 #include &lt;string&gt;中的 getline(cin, s) 第三个参数默认值为 ‘\n’ ，可以读入空格 格式化输出：cout： setprecision(n) 指定浮点数显示的总位数，cout&lt;&lt;setprecision(3)&lt;&lt;12.34567; 会输出12.3 宽度不够整数部分，setprecision将被忽略，cout&lt;&lt;setprecision(3)&lt;&lt;23456; 会输出23456 精度不改变，会一直保持效果 fixed 计算机自动使用科学计数法来显示长浮点数，使用fixed强制使用费科学计数法，默认显示到小数点后6位 使用cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;可控制显示到小数点后2位 showpoint 强制显示小数点 setw(width) 指定最小占用宽度，只影响接下来的一次输出 left和right setw(width)默认输出右对齐，使用lift可设置为左对齐 printf：文件输入输出： 需要#include &lt;fstream&gt; 读取文件： 123ifstream input("filename.txt"); //创建一个对象并打开文件，如果文件不存在会出现unexpected errorinput&gt;&gt;var1&gt;&gt;var2; //读入数据，与cin类似input.close(); //关闭文件 写入文件： 123ofstream output("filename.txt");//创建一个对象并打开文件,如果文件已经存在，内容会销毁并重新创建output&lt;&lt;var1&lt;&lt;var2; //读入数据，与cout类似output.close(); //关闭文件 输入输出重定向： Redirection.exe &lt; input &gt; output.txt可以从input.txt获取输入并把输出发送到output.txt]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1057. 数零壹(20)]]></title>
      <url>%2F2017%2F04%2F25%2FPAT-%E4%B9%99%E7%BA%A7-1057-%E6%95%B0%E9%9B%B6%E5%A3%B9-20%2F</url>
      <content type="text"><![CDATA[getline()的使用。 题目描述：给定一串长度不超过105的字符串，本题要求你将其中所有英文字母的序号（字母a-z对应序号1-26，不分大小写）相加，得到整数N，然后再分析一下N的二进制表示中有多少0、多少1。例如给定字符串“PAT (Basic)”，其字母序号之和为：16+1+20+2+1+19+9+3=71，而71的二进制是1000111，即有3个0、4个1。 输入格式：输入在一行中给出长度不超过105、以回车结束的字符串。 输出格式：在一行中先后输出0的个数和1的个数，其间以空格分隔。 输入样例：PAT (Basic) 输出样例：3 4 题解：1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123; string s; getline(cin, s); int sum = 0; for (int i = 0; i &lt; s.length(); i++) &#123; if (s[i] &gt;= 'a'&amp;&amp;s[i] &lt;= 'z') sum += (int)(s[i] - 'a' + 1); else if (s[i] &gt;= 'A'&amp;&amp;s[i] &lt;= 'Z') sum += (int)(s[i] - 'A' + 1); &#125; int zero=0, one=0; while (sum) &#123; int rem = sum % 2; rem == 0 ? zero++ : one++; sum /= 2; &#125; cout &lt;&lt; zero &lt;&lt;" "&lt;&lt; one; return 0;&#125; 心得： cin&gt;&gt;s;遇到空格就结束输入了，要使用geiline()输入整行，可是我不会啊不会啊]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1004. 成绩排名(20)]]></title>
      <url>%2F2017%2F04%2F24%2FPAT-%E4%B9%99%E7%BA%A7-1004-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D-20%2F</url>
      <content type="text"><![CDATA[一次编写，到处AC。 题目描述：读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。 输入格式：每个测试输入包含1个测试用例，格式为 第1行：正整数n 第2行：第1个学生的姓名 学号 成绩 第3行：第2个学生的姓名 学号 成绩 … … … 第n+1行：第n个学生的姓名 学号 成绩 其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。 输出格式：对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。 输入样例：3Joe Math990112 89Mike CS991301 100Mary EE990830 95 输出样例：Mike CS991301Joe Math990112 题解：1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;using namespace std;struct stu &#123; string name; string id; int score;&#125;;int main() &#123; int max = 0, min = 100; int n,first,last; cin &gt;&gt; n; vector&lt;stu&gt; a(n); for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i].name &gt;&gt; a[i].id &gt;&gt; a[i].score; if (a[i].score &gt; max) &#123; max = a[i].score; first = i; &#125; if (a[i].score &lt; min) &#123; min = a[i].score; last = i; &#125; &#125; cout &lt;&lt; a[first].name &lt;&lt; " " &lt;&lt; a[first].id&lt;&lt;endl; cout &lt;&lt; a[last].name &lt;&lt; " " &lt;&lt; a[last].id &lt;&lt; endl; return 0;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1003. 我要通过！(20)]]></title>
      <url>%2F2017%2F04%2F23%2FPAT-%E4%B9%99%E7%BA%A7-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81-20%2F</url>
      <content type="text"><![CDATA[字符串判断。 题目描述：“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。 得到“答案正确”的条件是： 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。 现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。 输入格式： 每个测试输入包含1个测试用例。第1行给出一个自然数n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。 输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。 输入样例：8PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAA 输出样例：YESYESYESYESNONONONO 题解：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;bool judge(string str) &#123; int len = str.length(); if (len &lt;= 2) return false; bool book[3] = &#123; false &#125;; for (int i = 0; i &lt; len; i++) &#123; if (str[i] == 'P') book[0] = true; else if (str[i] == 'A') book[1] = true; else if (str[i] == 'T') book[2] = true; else return false; if (str[i] == 'P') &#123; for (int j = 0; j &lt; i; j++) &#123; if (str[j] != 'A') return false; &#125; if (str[i + 1] != 'A') return false; for (int k = i + 2; k &lt; len; k++) &#123; if (str[k] != 'A') &#123; if (str[k] != 'T') return false; if ((len - 1 - k) != ((k - 1 - i) * i)) return false; for (int m = k + 1; m &lt; len; m++) &#123; if (str[m] != 'A') return false; &#125; &#125; &#125; &#125; &#125; if (book[0] == false || book[1] == false || book[2] == false) return false; return true;&#125;int main() &#123; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; string s; cin &gt;&gt; s; if (judge(s) == true) cout &lt;&lt; "YES" &lt;&lt; endl; else cout &lt;&lt; "NO" &lt;&lt; endl; &#125; return 0;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1002. 写出这个数 (20)]]></title>
      <url>%2F2017%2F04%2F22%2FPAT-%E4%B9%99%E7%BA%A7-1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0-20%2F</url>
      <content type="text"><![CDATA[20分的题开始有难度了。 题目描述：读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。 输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。 输出格式：在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。 输入样例：1234567890987654321123456789 输出样例：yi san wu 题解：123456789101112131415161718192021222324252627#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123; string s; cin &gt;&gt; s; int len = s.length(), sum=0; for (int i = 0; i &lt; len; i++) sum += s[i] - '0'; string str[10] = &#123; "ling", "yi", "er", "san", "si", "wu", "liu", "qi", "ba", "jiu" &#125;; int *b = new int[len]; int j = 0; if (sum == 0) cout &lt;&lt; "ling"; else &#123; while (sum != 0) &#123; b[j] = sum % 10; sum = sum / 10; j++; &#125; &#125; for (int i = j - 1; i &gt;= 1; i--) cout &lt;&lt; str[b[i]] &lt;&lt; " "; cout &lt;&lt; str[b[0]]; //最后一位后不要空格 delete[] b; return 0;&#125; 心得： 这道题难在输出。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1001. 害死人不偿命的(3n+1)猜想(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3-15%2F</url>
      <content type="text"><![CDATA[大概是PAT中最简单的一道。 题目描述：卡拉兹(Callatz)猜想： 对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展…… 我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？ 输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。 输出格式：输出从n计算到1需要的步数。 输入样例：3 输出样例：5 题解：123456789101112131415#include &lt;iostream&gt;using namespace std;int main()&#123; int n, step=0; cin &gt;&gt; n; while (n != 1) &#123; if (n % 2 == 0) n /= 2; else n = (3 * n + 1) / 2; step++; &#125; cout &lt;&lt; step; return 0;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1006. 换个格式输出整数(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1006-%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0-15%2F</url>
      <content type="text"><![CDATA[最水题の有力竞争者。 题目描述：让我们用字母B来表示“百”、字母S表示“十”，用“12…n”来表示个位数字n（&lt;10），换个格式来输出任一个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。 输入格式：每个测试输入包含1个测试用例，给出正整数n（&lt;1000）。 输出格式：每个测试用例的输出占一行，用规定的格式输出n。 输入样例1：234 输出样例1：BBSSS1234 输入样例2：23 输出样例2：SS123 题解：12345678910111213141516#include &lt;iostream&gt;using namespace std;int main()&#123; int n; cin &gt;&gt; n; int hun = n / 100; int ten = (n / 10) % 10; int one = n % 10; for (int i = 0; i &lt; hun; i++) cout &lt;&lt; "B"; for (int i = 0; i &lt; ten; i++) cout &lt;&lt; "S"; for (int i = 1; i &lt;= one; i++) cout &lt;&lt; i; return 0;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1011. A+B和C(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1011-A-B%E5%92%8CC-15%2F</url>
      <content type="text"><![CDATA[简单题，带小坑。 题目描述给定区间[-2^31, 2^31]内的3个整数A、B和C，请判断A+B是否大于C。 输入格式：输入第1行给出正整数T(&lt;=10)，是测试用例的个数。随后给出T组测试用例，每组占一行，顺序给出A、B和C。整数间以空格分隔。 输出格式：对每组测试用例，在一行中输出“Case #X: true”如果A+B&gt;C，否则输出“Case #X: false”，其中X是测试用例的编号（从1开始）。 输入样例：41 2 32 3 42147483647 0 21474836460 -2147483648 -2147483647 输出样例：Case #1: falseCase #2: trueCase #3: trueCase #4: false 题解：123456789101112131415#include &lt;iostream&gt;using namespace std;int main()&#123; int n; cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) &#123; long a, b, c; //用int不全对 cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; if ((a + b) &gt; c) cout &lt;&lt; "Case #" &lt;&lt; i &lt;&lt; ": true"&lt;&lt;endl; else cout &lt;&lt; "Case #" &lt;&lt; i &lt;&lt; ": false"&lt;&lt;endl; &#125; return 0;&#125; 心得： 给定区间[-2^31, 2^31]内的3个整数A、B和C a,b,c用int存储是部分正确，换成long就对了，难道OJ是用32位的吗？？？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1016. 部分A+B(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1016-%E9%83%A8%E5%88%86A-B-15%2F</url>
      <content type="text"><![CDATA[有点意思。 题目描述：正整数A的“DA（为1位整数）部分”定义为由A中所有DA组成的新整数PA。例如：给定A = 3862767，DA = 6，则A的“6部分”PA是66，因为A中有2个6。 现给定A、DA、B、DB，请编写程序计算PA + PB。 输入格式：输入在一行中依次给出A、DA、B、DB，中间以空格分隔，其中0 &lt; A, B &lt; 1010。 输出格式：在一行中输出PA + PB的值。 输入样例1：3862767 6 13530293 3 输出样例1：399 输入样例2：3862767 1 13530293 8 输出样例2：0 题解：12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main() &#123; long long a, b, da, db; cin &gt;&gt; a &gt;&gt; da &gt;&gt; b &gt;&gt; db; long long pa = 0, pb = 0; while (a != 0) &#123; if (a % 10 == da) pa = pa * 10 + da; a = a / 10; &#125; while (b != 0) &#123; if (b % 10 == db) pb = pb * 10 + db; b = b / 10; &#125; cout&lt;&lt;pa + pb; return 0;&#125; 心得： 用int也能AC，那么。。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1021. 个位数统计(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1021-%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1-15%2F</url>
      <content type="text"><![CDATA[string类的使用。 题目描述：给定一个k位整数N = dk-110k-1 + … + d1101 + d0 (0&lt;=di&lt;=9, i=0,…,k-1, dk-1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N = 100311，则有2个0，3个1，和1个3。 输入格式：每个输入包含1个测试用例，即一个不超过1000位的正整数N。 输出格式：对N中每一种不同的个位数字，以D:M的格式在一行中输出该位数字D及其在N中出现的次数M。要求按D的升序输出。 输入样例：100311 输出样例：0:21:33:1 题解：12345678910111213141516#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123; string s; cin &gt;&gt; s; int len = s.length(); int a[10] = &#123;0&#125;; for (int i = 0; i &lt; len; i++) a[s[i] - '0']++; for (int i = 0; i &lt; 10; i++) &#123; if (a[i] != 0) cout &lt;&lt; i &lt;&lt; ":" &lt;&lt; a[i] &lt;&lt; endl; &#125; return 0;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1026. 程序运行时间(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1026-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4-15%2F</url>
      <content type="text"><![CDATA[格式化输出。 题目描述：要获得一个C语言程序的运行时间，常用的方法是调用头文件time.h，其中提供了clock()函数，可以捕捉从程序开始运行到clock()被调用时所耗费的时间。这个时间单位是clock tick，即“时钟打点”。同时还有一个常数CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数f的运行时间，我们只要在调用f之前先调用clock()，获得一个时钟打点数C1；在f执行完成后再调用clock()，获得另一个时钟打点数C2；两次获得的时钟打点数之差(C2-C1)就是f运行所消耗的时钟打点数，再除以常数CLK_TCK，就得到了以秒为单位的运行时间。 这里不妨简单假设常数CLK_TCK为100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。 输入格式：输入在一行中顺序给出2个整数C1和C2。注意两次获得的时钟打点数肯定不相同，即C1 &lt; C2，并且取值在[0, 107]。 输出格式：在一行中输出被测函数运行的时间。运行时间必须按照“hh:mm:ss”（即2位的“时:分:秒”）格式输出；不足1秒的时间四舍五入到秒。 输入样例：123 4577973 输出样例：12:42:59 题解：123456789101112131415#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;int main() &#123; int c1, c2; cin &gt;&gt; c1 &gt;&gt; c2; int time = (int)((c2 - c1) / 100.0 + 0.5); int hh = time / 3600; time %= 3600; int mm = time / 60; int ss = time % 60; //setw设置宽度但不能补0，只好用printf了 printf("%02d:%02d:%02d", hh, mm, ss); return 0;&#125; 心得：不知道C++中如何实现这种效果。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1031. 查验身份证(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1031-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81-15%2F</url>
      <content type="text"><![CDATA[好麻烦的一道题。 暂时不会，贴出晴神代码= = 题解：12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;#include &lt;cstring&gt;int w[20] = &#123;7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2&#125;;char change[15] = &#123;'1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'&#125;;int main() &#123; int n; scanf("%d", &amp;n); bool flag = true; char str[20]; for(int i = 0; i &lt; n; i++) &#123; scanf("%s", str); int j, last = 0; for(j = 0; j &lt; 17; j++) &#123; if(!(str[j] &gt;= '0' &amp;&amp; str[j] &lt;= '9')) break; last = last + (str[j] - '0') * w[j]; &#125; if(j &lt; 17) &#123; flag = false; printf("%s\n", str); &#125; else &#123; if(change[last % 11] != str[17]) &#123; flag = false; printf("%s\n", str); &#125; &#125; &#125; if(flag == true) &#123; printf("All passed\n"); &#125; return 0;&#125; 心得：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1036. 跟奥巴马一起编程(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1036-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B-15%2F</url>
      <content type="text"><![CDATA[题解。 题解：1234567891011121314151617181920#include &lt;iostream&gt;using namespace std;int main()&#123; int n; char c; cin &gt;&gt; n &gt;&gt; c; int m = (int)(n/2.0 + 0.5); //四舍五入 for (int i = 0; i &lt; n; i++) cout &lt;&lt; c; cout &lt;&lt; endl; for (int j = 0; j &lt; m - 2; j++) &#123; cout &lt;&lt; c; for (int k = 0; k &lt; n - 2; k++) cout &lt;&lt; " "; cout &lt;&lt; c &lt;&lt; endl; &#125; for (int i = 0; i &lt; n; i++) cout &lt;&lt; c; return 0;&#125; 拓展：这道题四舍五入是关键点= = 下面给出浮点数的四舍五入实现方法 1234double a; scanf("%f",&amp;a); int i = (int)(a/10.0 + 0.5)*10; //个位四舍五入 int j = (int)(a + 0.5); //四舍五入成整型float b = (int)((a * 100) + 0.5)/100.0; //保留两位小数]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1041. 考试座位号(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1041-%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7-15%2F</url>
      <content type="text"><![CDATA[题解。 题目描述：每个PAT考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。 输入格式：输入第一行给出一个正整数N（&lt;=1000），随后N行，每行给出一个考生的信息：“准考证号 试机座位号 考试座位号”。其中准考证号由14位数字组成，座位从1到N编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。 考生信息之后，给出一个正整数M（&lt;=N），随后一行中给出M个待查询的试机座位号码，以空格分隔。 输出格式：对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用1个空格分隔。 输入样例：410120150912233 2 410120150912119 4 110120150912126 1 310120150912002 3 223 4 输出样例：10120150912002 210120150912119 1 题解：123456789101112131415161718192021222324252627#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;using namespace std;struct stu &#123; string id; int test, exam;&#125;;int main() &#123; int n, m,temp; cin &gt;&gt; n; vector&lt;stu&gt; a(n); for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i].id &gt;&gt; a[i].test &gt;&gt; a[i].exam; &#125; cin &gt;&gt; m; for (int i = 0; i &lt; m; i++) &#123; cin &gt;&gt; temp; for (int j = 0; j &lt; n; j++) &#123; if (a[j].test == temp) &#123; cout &lt;&lt; a[j].id&lt;&lt; " " &lt;&lt; a[j].exam &lt;&lt; endl; break; &#125; &#125; &#125; return 0;&#125; 心得： 使用string对象要#include &lt;string&gt; 疑问：比如按输入样例那样输入，为什么可以在最后一行输入3 4后，将两个结果一起输出出来？内存中发生了什么？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1046. 划拳(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1046-%E5%88%92%E6%8B%B3-15%2F</url>
      <content type="text"><![CDATA[题解。 题解：1234567891011121314151617#include &lt;iostream&gt;using namespace std;int main()&#123; int n,jiaDrink=0,yiDrink=0; cin &gt;&gt; n; for(int i = 0; i &lt; n; i++)&#123; int jiaHan,jiaHua,yiHan,yiHua; cin&gt;&gt;jiaHan&gt;&gt;jiaHua&gt;&gt;yiHan&gt;&gt;yiHua; int sum = jiaHan + yiHan; if(sum == jiaHua &amp;&amp; sum != yiHua) yiDrink++; else if(sum != jiaHua &amp;&amp; sum == yiHua) jiaDrink++; &#125; cout&lt;&lt;jiaDrink&lt;&lt;" "&lt;&lt;yiDrink; return 0;&#125; 心得： 这题太水了。。结果还是犯了变量名输错的小毛病]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1051. 复数乘法(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1051-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95-15%2F</url>
      <content type="text"><![CDATA[题解。 题解：12345678910111213141516171819202122232425#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; double r1,p1,r2,p2; cin&gt;&gt;r1&gt;&gt;p1&gt;&gt;r2&gt;&gt;p2; double a1 = r1 * cos(p1); double b1 = r1 * sin(p1); double a2 = r2 * cos(p2); double b2 = r2 * sin(p2); double a = a1*a2 - b1*b2; double b = a1*b2 + b1*a2; if (a + 0.005 &gt;= 0 &amp;&amp; a &lt; 0) printf("0.00"); else printf("%.2f", a); if(b &gt;= 0) printf("+%.2fi", b); else if (b + 0.01 &gt;= 0 &amp;&amp; b &lt; 0) printf("+0.00i"); else printf("%.2fi", b); return 0;&#125; 心得： cin要跟&gt;&gt;而不是&lt;&lt; 分界点的判定是抄的= =暂时不太明白]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1056. 组合数的和(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1056-%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E5%92%8C-15%2F</url>
      <content type="text"><![CDATA[题解。 题目描述：给定N个非0的个位数字，用其中任意2个数字都可以组合成1个2位的数字。要求所有可能组合出来的2位数字的和。例如给定2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。 输入格式：输入在一行中先给出N（1&lt;N&lt;10），随后是N个不同的非0个位数字。数字间以空格分隔。 输出格式：输出所有可能组合出来的2位数字的和。 输入样例：3 2 8 5 输出样例：330 题解：123456789101112131415161718#include &lt;iostream&gt;using namespace std;int main()&#123; int n, num[10]; cin&gt;&gt;n; for(int i = 0; i &lt; n; i++) cin&gt;&gt;num[i]; int temp,sum=0; for(int i = 0; i &lt; n-1; i++)&#123; for(int j = i+1; j &lt; n; j++)&#123; temp = num[i] + 10*num[j]; sum += temp; temp = 10*num[i] + num[j]; sum += temp; &#125; &#125; cout&lt;&lt;sum;&#125; 心得： 依次找出两数组合，调换个位十位的顺序可得两个数，都加到sum中。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1061. 判断题(15)]]></title>
      <url>%2F2017%2F04%2F17%2FPAT-%E4%B9%99%E7%BA%A7-1061-%E5%88%A4%E6%96%AD%E9%A2%98-15%2F</url>
      <content type="text"><![CDATA[题解。 题目描述：判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。 输入格式：输入在第一行给出两个不超过100的正整数N和M，分别是学生人数和判断题数量。第二行给出M个不超过5的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0代表“非”，1代表“是”。随后N行，每行给出一个学生的解答。数字间均以空格分隔。 输出格式：按照输入的顺序输出每个学生的得分，每个分数占一行。 输入样例：3 62 1 3 3 4 50 0 1 0 1 10 1 1 0 0 11 0 1 0 1 01 1 0 0 1 1 输出样例：131112 题解：1234567891011121314151617181920212223242526#include &lt;iostream&gt;using namespace std;int main()&#123; int n, m; cin &gt;&gt; n &gt;&gt; m; //输入分值 int value[100]; for (int i = 0; i &lt; m; i++) cin &gt;&gt; value[i]; //输入标准答案 int stdAns[100]; for (int i = 0; i &lt; m; i++) cin &gt;&gt; stdAns[i]; //输入学生答案并输出成绩 for (int i = 0; i &lt; n; i++) &#123; int total = 0; for (int j = 0; j &lt; m; j++) &#123; int opt; cin&gt;&gt;opt; if (opt == stdAns[j]) total += value[j]; &#125; cout&lt;&lt;total&lt;&lt;endl; &#125; return 0;&#125; 心得： 弱鸡还没学会使用STL，幸好这道题能开大数组。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PAT(乙级) 1066. 图像过滤(15)]]></title>
      <url>%2F2017%2F04%2F16%2FPAT-%E4%B9%99%E7%BA%A7-1066-%E5%9B%BE%E5%83%8F%E8%BF%87%E6%BB%A4-15%2F</url>
      <content type="text"><![CDATA[题解。 题目描述：图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。 输入格式：输入在第一行给出一幅图像的分辨率，即两个正整数M和N（0 &lt; M, N &lt;= 500），另外是待过滤的灰度值区间端点A和B（0 &lt;= A &lt; B &lt;= 255）、以及指定的替换灰度值。随后M行，每行给出N个像素点的灰度值，其间以空格分隔。所有灰度值都在[0, 255]区间内。 输出格式：输出按要求过滤后的图像。即输出M行，每行N个像素灰度值，每个灰度值占3位（例如黑色要显示为000），其间以一个空格分隔。行首尾不得有多余空格。 输入样例：3 5 100 150 03 189 254 101 119150 233 151 99 10088 123 149 0 255 输出样例：003 189 254 000 000000 233 151 099 000088 000 000 000 255 题解：1234567891011121314151617#include &lt;cstdio&gt;int main()&#123; int m, n, a, b, num, raw; scanf("%d%d%d%d%d", &amp;m, &amp;n, &amp;a, &amp;b, &amp;num); for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; scanf("%d", &amp;raw); if (raw &gt;= a &amp;&amp; raw &lt;= b) raw = num; if (j != 0) printf(" "); printf("%03d", raw); &#125; printf("\n"); &#125; return 0;&#125; 心得： 数组必须要用常数来定义，而这个题无法预知数组大小，但同时可以抛开数组采用“输入-处理-输出”的方法，不做中间保存。 另外这道题可以先根据条件开辟一个大数组，然后“输入-保存-处理-输出”]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[编程语言入门汇总]]></title>
      <url>%2F2017%2F04%2F15%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[学习编程第一步，学习一门语言。 Python如果你之前没接触过编程，那么以Python上手无疑是最好的。 零基础入门: 一定要首推良心中国大学MOOC上北京理工大学嵩天老师Python系列 >&gt;Python语言程序设计 >&gt;Python 网络爬虫与信息提取 >&gt;Python 数据分析与展示 >&gt;Python 机器学习应用 >&gt;Python 科学计算三维可视化 >&gt;Python 游戏开发入门 >&gt;Python 云端系统开发入门 这样跟下来就可用学到Python在各个领域的应用了，真是不得了~ 廖雪峰的Python教程 这个教程是大家口口相传的良心入门资料，经过群众检验的好东西~ Udacity的CS入门课 优达学城真是良心啊！通过这门课可以学到Python、搭建搜索引擎和社交网络 C语言 零基础入门: 计算导论与C语言基础 C程序设计进阶 PKU李戈教授在Coursea上的课程，可以说李老师是我看过所有MOOC中讲课最精彩的。富有激情，生动有趣，总能把知识点讲解透彻。另外，李戈老师在PKU的课程录像放在了北大公开课，相比慕课版有不少学生的讨论的环节。 C语言程序设计 : 现代方法 哈佛、麻省理工、斯坦福的C语言教材。比《C Primer Plus》生动些。 经典必看: C程序设计语言 : 第 2 版·新版 俗称K&amp;R，C语言之父的作品。不适合入门，但入门之后必看。 C++讲真，如果你不是非要用C++，那就不要学。Life is too short to program in C++! 当然，想练习算法题的话，C++是很好的选择，特别是运行时间受限时。使用C语言加上C++的STL部分就够了。 零基础入门: C++程序设计（原书第3版） 这本书是很多学校的教材。作者梁勇，美国教授，他编写的教材特点是适合初学者。 如果你嫌看书枯燥，那么以此书为上课教材的 北邮C++程序设计(网易云课堂) 可搭配食用 C++ Primer（第 5 版） 如果你之前有过C语言基础，那么这本全明星阵容的经典适合你。读完这本你就入门了！ Java 零基础入门： Java核心技术·卷Ⅰ 对比了网上推荐的众多经典书籍，我选定了这本作为我的入门教材。目前出到了第10版，基于 Java 8 ，非常新，面向零基础。 去Coursea、Udacity上面搜Java吧，应该都挺新的。 经典必看： Java编程思想 ​如果想深入理解Java面向对象的思想，这本书不可或缺。 Android方向： 第一行代码：Android（第2版） 需要有Java基础，16年新出的。 Google参与制作的优达学城上的 Android 开发入门（中/英） 面向零基础，不会Java也行 JavaScript因为Node.js及其他一些技术的出现，JS成为了全世界最受欢迎的语言。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[openCV学习笔记]]></title>
      <url>%2F2017%2F04%2F10%2Fopencv%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[整理学习openCV过程中重要的知识点。 学习资料我在学习openCV的过程中，主要参考了以下资料： 《openCV3编程入门》 虽然这本书写的很没有诚意而且各种抄袭，但新手翻阅一下还是能学到点东西的。 中文官方文档 翻译的官方文档，错别字挺多的= = Learning OpenCV 3 著名的openCV书，在openCV1版本就是重要的学习资料，如今随着3版本更新了。此书没有中文版，想要电子版的可以联系我。 openCV中的helloworld程序123456789#include &lt;opencv2/opencv.hpp&gt;using namespace cv;int main()&#123; Mat img = imread("1.jpg"); imshow("原图", img); waitKey(); return 0;&#125; 首先前两行属于固定开头，这个写法是最简洁的。 opencv.hpp 中包含了opencv全部的库文件声明，不必再include其他头文件。而命名空间cv不必多说。 Mat是openCV中的数据结构，用于保存图像。 imread()函数，原型如下 1Mat imread(const string&amp; filename, int flags=1 ); ​第一个参数是文件名。第二个参数是载入标识，默认为1，标识载入三通道的彩色图像。也可取其他值比如：0-将图像转换成灰度返回 imshow()函数,原型如下 1void imshow(const string&amp; winname, InputArray mat); 第一个参数是窗口名。第二个参数填需要显示的图像 waitKey()函数 保持图片窗口显示，直到任意按键按下。 视频的读取与播放12345678910111213141516#include &lt;opencv2\opencv.hpp&gt; using namespace cv; int main() &#123; VideoCapture capture("1.avi"); while(1) &#123; Mat frame; capture&gt;&gt;frame; if (frame.empty()) break; imshow("读取视频",frame); waitKey(30); &#125; return 0; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[VS2017与openCV3的安装]]></title>
      <url>%2F2017%2F04%2F10%2FVS2017%E4%B8%8EopenCV3%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[Windows 10 下配置openCV3 下载我这里下的是 VS2017社区版，对我来说够用了。 openCV 3.2.0 版本：下载地址 。自己选择安装目录，下面使用\opencv 代表你的安装目录，自己要补全。 配置我的电脑是64位的，我就按照64位来说。 添加环境变量此电脑右键&gt;属性&gt;高级系统设置&gt;环境变量&gt;选中Path编辑&gt;在变量值末尾增加\openCV\build\x64\vc14\bin 如下图所示，按红色序号来 配置动态链接库就是一步简单的复制粘贴： 找到 \opencv\build\x64\vc14\lib\ 目录，将文件全部选中，拷贝至c:\Windows\SysWOW64 文件夹下 工程目录配置在VS2017中新建空项目，x86改为x64，debug模式。进入属性窗口，如下： 包含目录在包含目录中添加如下内容(注意自己的opencv目录) 库目录在库目录下添加如下内容 附加依赖项找到链接器&gt;输入，在附加依赖项中添加如下内容 测试新建项目，输入下面这段代码，注意在项目目录里放图片= = 123456789#include &lt;opencv2/opencv.hpp&gt;using namespace cv;int main()&#123; Mat img = imread("1.jpg"); imshow("原图", img); waitKey(); return 0;&#125; 按Ctrl+F5运行。如果成功的话会看到如下窗口 恭喜你，安装成功，开始下一步的学习吧~ 如果你连测试程序都看不懂的话，可以看我另一篇博文：openCV学习笔记]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[优秀博客推荐]]></title>
      <url>%2F2017%2F03%2F30%2F%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2%E6%8E%A8%E8%8D%90%2F</url>
      <content type="text"><![CDATA[本文推荐我所知道的优秀个人博客，主要是CS领域的名人或学生。 刘未鹏 | Mindhacks 他写过一本关于心智成长的书《暗时间》特别好，是他博文的选录。他向我们展示了一个普通人在某一领域钻研能成为什么样子，从C++到思维再到现在的养娃，认真态度总能帮他取得一些成绩。 如果你想开始写博客，建议你读一下这篇 为什么你应该（从现在开始就）写博客 如果你是一名大学生，你应该能从这篇 我在南大的七年 中得到启发 小土刀 | wdxtub 我是通过搜CSAPP找到的，博主技术范围涉猎较广，读书特别多，也乐意分享，是我心中的大牛~~ 如果你在钻研《深入理解计算机系统》这本书，那么他的 读薄 CSAPP 和 读厚 CSAPP 系列也许能作为参考 (未完)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Liunx入门汇总]]></title>
      <url>%2F2017%2F03%2F29%2FLiunx%E5%85%A5%E9%97%A8%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[小白如何入门Linux，请听另一位小白怎么说。 Knowledge 先听故事 打开网易云音乐，搜索电台’软件那些事儿’ 。可以找到一个Linux的系列，先听一下林纳斯是怎样写出Linux来的吧 通俗入门: 《Linux入门很简单》 这是我看过的Linux的第一本书，很薄，两天可以看完，从书中可以学到一些文件系统、apt、shell、make等一些简单知识，语言比较调皮，不会枯燥。 再次入门: 《Linux命令行大全》 也是零基础可看，能学到命令行的许多知识。 别的我还没看过，等我看了再告诉你~~听说鸟哥的书不错，嘿嘿 Practice如果你不喜欢麻烦的安装，可以先使用Deepin作为过渡，这是国人做的Linux发行版，UI比较好看，我现在当成主力OS来用，还在探索中。你可以到 这里 下载。像装一个小软件一样安装Deepin系统~~]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[计算机网络入门汇总]]></title>
      <url>%2F2017%2F03%2F29%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[网络好复杂啊，有没有比较平滑温和的学习路径呢 超入门读物，2017新出炉的日本科普书 《网络是怎样连接的》 绝对是最合适的入门书！！ 经典教材： Kurose的 《自顶向下方法》 被很多人推荐，据说比特南鲍姆那本要好。 谢希仁的 《计算机网络》 已经出到第七版，考研指定参考书，评价不错]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数据结构与算法入门汇总]]></title>
      <url>%2F2017%2F03%2F29%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[Programs = Data Structure + Algorithm 面向学习： 清华邓俊辉的数据结构 估计是中文资料中最好的数据结构MOOC。 浙大陈越姥姥的数据结构 面向考试： 《数据结构高分笔记》 购买链接请关注率辉学长的公众号：shuaihui_ds 率辉学长为18考研出了专栏，已经开始更新了，在他的公众号里 面向Java程序员： 算法第4版 (Ps:作者是高德纳的学生) 应该是最好的选择 同时配合Coursera上普林斯顿的课程，直接打通。 面向天才： 计算机程序设计艺术（第1卷） : 基本算法 算法导论（原书第3版） 实战： CS界的托福考试 PAT ，考好会有名企通知面试- -（Ps：牛客网有优惠券活动，能减50元报名费） 算法笔记 江湖人称晴神宝典的PAT上机指南，刷两遍书，PAT甲级能考满分]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[大学数学学习资源推荐]]></title>
      <url>%2F2017%2F03%2F29%2F%E5%A4%A7%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90%2F</url>
      <content type="text"><![CDATA[微积分、线性代数、概率论与数理统计。 微积分 浙大名师苏德矿的课堂录制版，非常详细 传送门 哈工大尹逊波老师的微积分课，评价非常好，老师很有人格魅力。传送门 线性代数 MIT的线性代数，Gilbert Strang 讲授，非常非常好。网易公开课和B站 有中文字幕，还有习题课的视频 概率论与数理统计 如果是计算机专业的同学，那么南京大学的概率论MOOC一定不能错过~使用Python辅助教学]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Web学习资源汇总]]></title>
      <url>%2F2017%2F03%2F29%2FWeb%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[Web的一切。 前端入门: Head First HTML与CSS（第2版） JavaScript DOM编程艺术 （第2版） 发现一个灰常好的英文资料，涵盖了前端的方方面面，而且每年更新：Front-End Developer Handbook 2017 后端： 还没研究，，好像技术栈很多= =]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[A+B输入输出练习]]></title>
      <url>%2F2017%2F03%2F28%2Fcodeup%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[A+B的格式化输入输出，是最基本的练习。 本文给出 codeup上 A+B输入输出练习 关键代码 1000 123while(scanf("%d%d",&amp;a,&amp;b) != EOF)&#123; printf("%d\n", a+b); &#125; 1001 12345scanf("%d",&amp;n); while(n--)&#123; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",a+b); &#125; 1002 12345scanf("%d %d",&amp;a,&amp;b);while((a!=0)||(b!=0))&#123; printf("%d\n", a+b); scanf("%d %d",&amp;a,&amp;b);&#125; 1003 123456789101112131415#include &lt;cstdio&gt;int main()&#123; int N = 0; scanf("%d",&amp;N); while(N!=0)&#123; int sum = 0, num = 0; //使用变量num接收N个数相加 for(int i=0;i&lt;N;i++)&#123; scanf("%d",&amp;num); sum+=num; &#125; printf("%d\n",sum); scanf("%d",&amp;N); &#125; return 0;&#125; 1004 123456789101112131415#include &lt;cstdio&gt;int main()&#123; int N = 0, M = 0; scanf("%d",&amp;N); for(int i=0;i&lt;N;i++)&#123; scanf("%d",&amp;M); int sum = 0,num = 0; for(int j=0;j&lt;M;j++)&#123; scanf("%d",&amp;num); sum += num; &#125; //算出此行的和 printf("%d\n",sum); &#125; //打印出所有行的和 return 0;&#125; 1005 1234567891011121314#include &lt;cstdio&gt; int main()&#123; int N = 0; //关键点在于结束判定 while(scanf("%d",&amp;N) != EOF)&#123; int sum = 0, num = 0; for(int i=0;i&lt;N;i++)&#123; scanf("%d", &amp;num); sum += num; &#125; printf("%d\n",sum); &#125; return 0; &#125; 1006 12345678#include &lt;cstdio&gt;int main()&#123; int a=0,b=0; while(scanf("%d %d",&amp;a,&amp;b) != EOF)&#123; printf("%d\n\n", a+b); &#125;return 0;&#125; 1007 123456789101112131415#include &lt;cstdio&gt;int main()&#123; int N = 0, M = 0; scanf("%d",&amp;N); for(int i=0;i&lt;N;i++)&#123; scanf("%d",&amp;M); int sum = 0,num = 0; for(int j=0;j&lt;M;j++)&#123; scanf("%d",&amp;num); sum += num; &#125; //算出此行的和 printf("%d\n\n",sum); //比1004多了一个\n &#125; //打印出所有行的和 return 0;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[在Deepin操作系统下安装openCV]]></title>
      <url>%2F2017%2F03%2F28%2F%E5%9C%A8Deepin%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85openCV%2F</url>
      <content type="text"><![CDATA[在国产Linux发行版Deepin上使用openCV。 装系统Deepin是一个国产的linux发行版，因为其极高的颜值和不需要折腾的操作吸引了我。正好厌倦了windows 10，又赶上大四的毕业设计，就拿来玩玩了。首先,Deepin系统的安装是非常傻瓜式的，参照官网上的教程 几步就可装好。我采用的是体验安装，重启之后即可选择进入Deepin系统。 配置IDE写Python的应该都知道JetBrain家族的PyCharm好用,而这个家族的IDE们风格一致,使用体验好,所以C++也用他家的Clion吧。//如果是学生的话可以通过认证来获得免费的专业版许可证，实在良心。Deepin的深度商店里是Clion的，然鹅不是最新版，所以最好在官网 下载,然后解压缩，找到Clion.sh文件双击运行开始安装。//这里会出现一个问题，由于CLion是使用CMake Toolchain来编译，安装时会提示C++ Complier: not found 。解决方案为，在终端输入指令 sudo apt-get install g++，等待安装完成即可。 安装openCV下载官网下载：http://opencv.org/downloads.html 选择opencv3.2.0 linux 然后解压缩 安装依赖安装编译opencv的一些依赖 12345sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev 进入opencv3.2.0文件夹（cd ~/opencv-3.1.0）执行： 123mkdir buildcd build 配置opencv文件12345cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..sudo makesudo make install 这样opencv3.2.0 就安装成功了 参考资料1]https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=44751&amp;highlight=clion2]https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=43127&amp;extra=]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[学习使用Git和GitHub]]></title>
      <url>%2F2017%2F03%2F28%2F%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8Git%E5%92%8CGitHub%2F</url>
      <content type="text"><![CDATA[最先进的分布式版本控制系统。 入门书：Pro Git 文字教程：廖雪峰的Git教程 视频教程：如何使用 Git 和 GitHub 以上3个教程都是适合新手的，学习Git，不必陷入繁杂的细节，先记住最常用的几个操作就能完成绝大场景下的使用。 感谢Linus！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我是怎样搭建这个博客的]]></title>
      <url>%2F2017%2F03%2F27%2F%E6%88%91%E6%98%AF%E6%80%8E%E6%A0%B7%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%9A%84%2F</url>
      <content type="text"><![CDATA[从零开始，一步一步搭建出属于自己的静态博客。（未写完 ~注意~过程中可能会有报错，请不要放弃，多使用搜索引擎搜索报错信息。本人是在第四次尝试时才搭建成功，最后一次捣鼓了一整天终于弄好。所以坚持下去，你也会有自己的博客~ 准备工作注册Github 注册个人账号 创建一个新仓库，并命名为：你的用户名.github.io 环境安装 安装Node.js 安装Git 打开Git Bash，输入 123git config --global user.name &quot;你的github用户名&quot;git config --global user.email &quot;你的github注册邮箱&quot; 安装Hexo 1npm install -g hexo-cli 博客初始化 选择你的保存路径，打开命令行（这里推荐windows下的Cmder），输入 1hexo init blog 成功后，输入 1hexo g 这一步是使用hexo生成博客，不过还在本地。 （可选）在本地预览博客效果 1hexo d 会提示你可以浏览http://localhost:4000/ 查看 部署到github 意思就是上传到github上托管 主题设置hexo官网 挑选喜欢的主题 想要设置我这个主题的请看 这篇 发表文章在cmd中切换到hexo目录，输入 1hexo n 你的文章名字 然后用文件管理器打开 hexo安装目录\source\_post找到新建的MD文件，使用Markdown语法进行写作 注意文档头的设置信息，可选项有标题、时间、分类、标签、是否开启目录、是否开放评论。 (这里推荐Windows下一款Markdown编辑器Typora，灰常好用。 保存完成后在命令行输入 1hexo g -d 这是生成并部署的简写。刷新你的页面，就可以看到更新了~ (可选)安装插件评论组件可选的的有网易云跟帖、友言等 流量统计可以使用百度统计 绑定域名参考链接Hexo教程https://zhuanlan.zhihu.com/p/25471760 主题教程https://www.haomwei.com/technology/maupassant-hexo.html]]></content>
    </entry>

    
  
  
</search>
